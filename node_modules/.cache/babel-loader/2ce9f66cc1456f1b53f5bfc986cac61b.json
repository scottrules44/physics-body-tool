{"ast":null,"code":"/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType;\n  let suffix = ']';\n\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n\n  if (node.type === 'imageReference') {\n    return {\n      type: 'text',\n      value: '![' + node.alt + suffix\n    };\n  }\n\n  const contents = state.all(node);\n  const head = contents[0];\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift({\n      type: 'text',\n      value: '['\n    });\n  }\n\n  const tail = contents[contents.length - 1];\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push({\n      type: 'text',\n      value: suffix\n    });\n  }\n\n  return contents;\n}","map":{"version":3,"names":["revert","state","node","subtype","referenceType","suffix","label","identifier","type","value","alt","contents","all","head","unshift","tail","length","push"],"sources":["/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/node_modules/mdast-util-to-hast/lib/revert.js"],"sourcesContent":["/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6B;EAClC,MAAMC,OAAO,GAAGD,IAAI,CAACE,aAArB;EACA,IAAIC,MAAM,GAAG,GAAb;;EAEA,IAAIF,OAAO,KAAK,WAAhB,EAA6B;IAC3BE,MAAM,IAAI,IAAV;EACD,CAFD,MAEO,IAAIF,OAAO,KAAK,MAAhB,EAAwB;IAC7BE,MAAM,IAAI,OAAOH,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACK,UAA1B,IAAwC,GAAlD;EACD;;EAED,IAAIL,IAAI,CAACM,IAAL,KAAc,gBAAlB,EAAoC;IAClC,OAAO;MAACA,IAAI,EAAE,MAAP;MAAeC,KAAK,EAAE,OAAOP,IAAI,CAACQ,GAAZ,GAAkBL;IAAxC,CAAP;EACD;;EAED,MAAMM,QAAQ,GAAGV,KAAK,CAACW,GAAN,CAAUV,IAAV,CAAjB;EACA,MAAMW,IAAI,GAAGF,QAAQ,CAAC,CAAD,CAArB;;EAEA,IAAIE,IAAI,IAAIA,IAAI,CAACL,IAAL,KAAc,MAA1B,EAAkC;IAChCK,IAAI,CAACJ,KAAL,GAAa,MAAMI,IAAI,CAACJ,KAAxB;EACD,CAFD,MAEO;IACLE,QAAQ,CAACG,OAAT,CAAiB;MAACN,IAAI,EAAE,MAAP;MAAeC,KAAK,EAAE;IAAtB,CAAjB;EACD;;EAED,MAAMM,IAAI,GAAGJ,QAAQ,CAACA,QAAQ,CAACK,MAAT,GAAkB,CAAnB,CAArB;;EAEA,IAAID,IAAI,IAAIA,IAAI,CAACP,IAAL,KAAc,MAA1B,EAAkC;IAChCO,IAAI,CAACN,KAAL,IAAcJ,MAAd;EACD,CAFD,MAEO;IACLM,QAAQ,CAACM,IAAT,CAAc;MAACT,IAAI,EAAE,MAAP;MAAeC,KAAK,EAAEJ;IAAtB,CAAd;EACD;;EAED,OAAOM,QAAP;AACD"},"metadata":{},"sourceType":"module"}