{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node);\n  const loose = parent ? listLoose(parent) : listItemLoose(node);\n  /** @type {Properties} */\n\n  const properties = {};\n  /** @type {Array<ElementContent>} */\n\n  const children = [];\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0];\n    /** @type {Element} */\n\n    let paragraph;\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head;\n    } else {\n      paragraph = {\n        type: 'element',\n        tagName: 'p',\n        properties: {},\n        children: []\n      };\n      results.unshift(paragraph);\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({\n        type: 'text',\n        value: ' '\n      });\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      },\n      children: []\n    }); // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n\n    properties.className = ['task-list-item'];\n  }\n\n  let index = -1;\n\n  while (++index < results.length) {\n    const child = results[index]; // Add eols before nodes, except if this is a loose, first paragraph.\n\n    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {\n      children.push({\n        type: 'text',\n        value: '\\n'\n      });\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children);\n    } else {\n      children.push(child);\n    }\n  }\n\n  const tail = results[results.length - 1]; // Add a final eol.\n\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({\n      type: 'text',\n      value: '\\n'\n    });\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: 'li',\n    properties,\n    children\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\n\nfunction listLoose(node) {\n  let loose = false;\n\n  if (node.type === 'list') {\n    loose = node.spread || false;\n    const children = node.children;\n    let index = -1;\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index]);\n    }\n  }\n\n  return loose;\n}\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\n\n\nfunction listItemLoose(node) {\n  const spread = node.spread;\n  return spread === undefined || spread === null ? node.children.length > 1 : spread;\n}","map":{"version":3,"names":["listItem","state","node","parent","results","all","loose","listLoose","listItemLoose","properties","children","checked","head","paragraph","type","tagName","unshift","length","value","disabled","className","index","child","push","tail","result","patch","applyData","spread","undefined"],"sources":["/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/node_modules/mdast-util-to-hast/lib/handlers/list-item.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;EAC5C,MAAMC,OAAO,GAAGH,KAAK,CAACI,GAAN,CAAUH,IAAV,CAAhB;EACA,MAAMI,KAAK,GAAGH,MAAM,GAAGI,SAAS,CAACJ,MAAD,CAAZ,GAAuBK,aAAa,CAACN,IAAD,CAAxD;EACA;;EACA,MAAMO,UAAU,GAAG,EAAnB;EACA;;EACA,MAAMC,QAAQ,GAAG,EAAjB;;EAEA,IAAI,OAAOR,IAAI,CAACS,OAAZ,KAAwB,SAA5B,EAAuC;IACrC,MAAMC,IAAI,GAAGR,OAAO,CAAC,CAAD,CAApB;IACA;;IACA,IAAIS,SAAJ;;IAEA,IAAID,IAAI,IAAIA,IAAI,CAACE,IAAL,KAAc,SAAtB,IAAmCF,IAAI,CAACG,OAAL,KAAiB,GAAxD,EAA6D;MAC3DF,SAAS,GAAGD,IAAZ;IACD,CAFD,MAEO;MACLC,SAAS,GAAG;QAACC,IAAI,EAAE,SAAP;QAAkBC,OAAO,EAAE,GAA3B;QAAgCN,UAAU,EAAE,EAA5C;QAAgDC,QAAQ,EAAE;MAA1D,CAAZ;MACAN,OAAO,CAACY,OAAR,CAAgBH,SAAhB;IACD;;IAED,IAAIA,SAAS,CAACH,QAAV,CAAmBO,MAAnB,GAA4B,CAAhC,EAAmC;MACjCJ,SAAS,CAACH,QAAV,CAAmBM,OAAnB,CAA2B;QAACF,IAAI,EAAE,MAAP;QAAeI,KAAK,EAAE;MAAtB,CAA3B;IACD;;IAEDL,SAAS,CAACH,QAAV,CAAmBM,OAAnB,CAA2B;MACzBF,IAAI,EAAE,SADmB;MAEzBC,OAAO,EAAE,OAFgB;MAGzBN,UAAU,EAAE;QAACK,IAAI,EAAE,UAAP;QAAmBH,OAAO,EAAET,IAAI,CAACS,OAAjC;QAA0CQ,QAAQ,EAAE;MAApD,CAHa;MAIzBT,QAAQ,EAAE;IAJe,CAA3B,EAhBqC,CAuBrC;IACA;;IACAD,UAAU,CAACW,SAAX,GAAuB,CAAC,gBAAD,CAAvB;EACD;;EAED,IAAIC,KAAK,GAAG,CAAC,CAAb;;EAEA,OAAO,EAAEA,KAAF,GAAUjB,OAAO,CAACa,MAAzB,EAAiC;IAC/B,MAAMK,KAAK,GAAGlB,OAAO,CAACiB,KAAD,CAArB,CAD+B,CAG/B;;IACA,IACEf,KAAK,IACLe,KAAK,KAAK,CADV,IAEAC,KAAK,CAACR,IAAN,KAAe,SAFf,IAGAQ,KAAK,CAACP,OAAN,KAAkB,GAJpB,EAKE;MACAL,QAAQ,CAACa,IAAT,CAAc;QAACT,IAAI,EAAE,MAAP;QAAeI,KAAK,EAAE;MAAtB,CAAd;IACD;;IAED,IAAII,KAAK,CAACR,IAAN,KAAe,SAAf,IAA4BQ,KAAK,CAACP,OAAN,KAAkB,GAA9C,IAAqD,CAACT,KAA1D,EAAiE;MAC/DI,QAAQ,CAACa,IAAT,CAAc,GAAGD,KAAK,CAACZ,QAAvB;IACD,CAFD,MAEO;MACLA,QAAQ,CAACa,IAAT,CAAcD,KAAd;IACD;EACF;;EAED,MAAME,IAAI,GAAGpB,OAAO,CAACA,OAAO,CAACa,MAAR,GAAiB,CAAlB,CAApB,CA1D4C,CA4D5C;;EACA,IAAIO,IAAI,KAAKlB,KAAK,IAAIkB,IAAI,CAACV,IAAL,KAAc,SAAvB,IAAoCU,IAAI,CAACT,OAAL,KAAiB,GAA1D,CAAR,EAAwE;IACtEL,QAAQ,CAACa,IAAT,CAAc;MAACT,IAAI,EAAE,MAAP;MAAeI,KAAK,EAAE;IAAtB,CAAd;EACD;EAED;;;EACA,MAAMO,MAAM,GAAG;IAACX,IAAI,EAAE,SAAP;IAAkBC,OAAO,EAAE,IAA3B;IAAiCN,UAAjC;IAA6CC;EAA7C,CAAf;EACAT,KAAK,CAACyB,KAAN,CAAYxB,IAAZ,EAAkBuB,MAAlB;EACA,OAAOxB,KAAK,CAAC0B,SAAN,CAAgBzB,IAAhB,EAAsBuB,MAAtB,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,SAASlB,SAAT,CAAmBL,IAAnB,EAAyB;EACvB,IAAII,KAAK,GAAG,KAAZ;;EACA,IAAIJ,IAAI,CAACY,IAAL,KAAc,MAAlB,EAA0B;IACxBR,KAAK,GAAGJ,IAAI,CAAC0B,MAAL,IAAe,KAAvB;IACA,MAAMlB,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;IACA,IAAIW,KAAK,GAAG,CAAC,CAAb;;IAEA,OAAO,CAACf,KAAD,IAAU,EAAEe,KAAF,GAAUX,QAAQ,CAACO,MAApC,EAA4C;MAC1CX,KAAK,GAAGE,aAAa,CAACE,QAAQ,CAACW,KAAD,CAAT,CAArB;IACD;EACF;;EAED,OAAOf,KAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBN,IAAvB,EAA6B;EAC3B,MAAM0B,MAAM,GAAG1B,IAAI,CAAC0B,MAApB;EAEA,OAAOA,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAnC,GACH1B,IAAI,CAACQ,QAAL,CAAcO,MAAd,GAAuB,CADpB,GAEHW,MAFJ;AAGD"},"metadata":{},"sourceType":"module"}