{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\nimport { revert } from '../revert.js';\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\n\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier);\n\n  if (!def) {\n    return revert(state, node);\n  }\n  /** @type {Properties} */\n\n\n  const properties = {\n    href: normalizeUri(def.url || '')\n  };\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title;\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","map":{"version":3,"names":["normalizeUri","revert","linkReference","state","node","def","definition","identifier","properties","href","url","title","undefined","result","type","tagName","children","all","patch","applyData"],"sources":["/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,6BAA3B;AACA,SAAQC,MAAR,QAAqB,cAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;EACzC,MAAMC,GAAG,GAAGF,KAAK,CAACG,UAAN,CAAiBF,IAAI,CAACG,UAAtB,CAAZ;;EAEA,IAAI,CAACF,GAAL,EAAU;IACR,OAAOJ,MAAM,CAACE,KAAD,EAAQC,IAAR,CAAb;EACD;EAED;;;EACA,MAAMI,UAAU,GAAG;IAACC,IAAI,EAAET,YAAY,CAACK,GAAG,CAACK,GAAJ,IAAW,EAAZ;EAAnB,CAAnB;;EAEA,IAAIL,GAAG,CAACM,KAAJ,KAAc,IAAd,IAAsBN,GAAG,CAACM,KAAJ,KAAcC,SAAxC,EAAmD;IACjDJ,UAAU,CAACG,KAAX,GAAmBN,GAAG,CAACM,KAAvB;EACD;EAED;;;EACA,MAAME,MAAM,GAAG;IACbC,IAAI,EAAE,SADO;IAEbC,OAAO,EAAE,GAFI;IAGbP,UAHa;IAIbQ,QAAQ,EAAEb,KAAK,CAACc,GAAN,CAAUb,IAAV;EAJG,CAAf;EAMAD,KAAK,CAACe,KAAN,CAAYd,IAAZ,EAAkBS,MAAlB;EACA,OAAOV,KAAK,CAACgB,SAAN,CAAgBf,IAAhB,EAAsBS,MAAtB,CAAP;AACD"},"metadata":{},"sourceType":"module"}