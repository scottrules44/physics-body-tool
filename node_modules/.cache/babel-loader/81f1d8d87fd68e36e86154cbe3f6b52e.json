{"ast":null,"code":"/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt;\n  return one(value, typeof includeImageAlt === 'boolean' ? includeImageAlt : true);\n}\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\n\nfunction one(value, includeImageAlt) {\n  return node(value) && ('value' in value && value.value || includeImageAlt && 'alt' in value && value.alt || 'children' in value && all(value.children, includeImageAlt)) || Array.isArray(value) && all(value, includeImageAlt) || '';\n}\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\n\n\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n\n  return result.join('');\n}\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\n\n\nfunction node(value) {\n  return Boolean(value && typeof value === 'object');\n}","map":{"version":3,"names":["toString","value","options","includeImageAlt","one","node","alt","all","children","Array","isArray","values","result","index","length","join","Boolean"],"sources":["/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/node_modules/mdast-util-to-string/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,OAAzB,EAAkC;EACvC,MAAMC,eAAe,GAAG,CAACD,OAAO,IAAI,EAAZ,EAAgBC,eAAxC;EACA,OAAOC,GAAG,CACRH,KADQ,EAER,OAAOE,eAAP,KAA2B,SAA3B,GAAuCA,eAAvC,GAAyD,IAFjD,CAAV;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAT,CAAaH,KAAb,EAAoBE,eAApB,EAAqC;EACnC,OACGE,IAAI,CAACJ,KAAD,CAAJ,KACG,WAAWA,KAAX,IAAoBA,KAAK,CAACA,KAA3B,IACEE,eAAe,IAAI,SAASF,KAA5B,IAAqCA,KAAK,CAACK,GAD7C,IAEE,cAAcL,KAAd,IAAuBM,GAAG,CAACN,KAAK,CAACO,QAAP,EAAiBL,eAAjB,CAH9B,CAAD,IAICM,KAAK,CAACC,OAAN,CAAcT,KAAd,KAAwBM,GAAG,CAACN,KAAD,EAAQE,eAAR,CAJ5B,IAKA,EANF;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,GAAT,CAAaI,MAAb,EAAqBR,eAArB,EAAsC;EACpC;EACA,MAAMS,MAAM,GAAG,EAAf;EACA,IAAIC,KAAK,GAAG,CAAC,CAAb;;EAEA,OAAO,EAAEA,KAAF,GAAUF,MAAM,CAACG,MAAxB,EAAgC;IAC9BF,MAAM,CAACC,KAAD,CAAN,GAAgBT,GAAG,CAACO,MAAM,CAACE,KAAD,CAAP,EAAgBV,eAAhB,CAAnB;EACD;;EAED,OAAOS,MAAM,CAACG,IAAP,CAAY,EAAZ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASV,IAAT,CAAcJ,KAAd,EAAqB;EACnB,OAAOe,OAAO,CAACf,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA3B,CAAd;AACD"},"metadata":{},"sourceType":"module"}