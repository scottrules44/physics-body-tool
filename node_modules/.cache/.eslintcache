[{"/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/index.js":"1","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/App.js":"2","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/pages/Home.js":"3","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/pages/About.js":"4","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/Editor.js":"5","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/BodyTest.js":"6","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/Selector.js":"7","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/Dots.js":"8","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/modules/random.js":"9"},{"size":250,"mtime":1657833861000,"results":"10","hashOfConfig":"11"},{"size":730,"mtime":1657945966000,"results":"12","hashOfConfig":"11"},{"size":361,"mtime":1657835874000,"results":"13","hashOfConfig":"11"},{"size":447,"mtime":1675565161986,"results":"14","hashOfConfig":"11"},{"size":7896,"mtime":1661475499000,"results":"15","hashOfConfig":"11"},{"size":4258,"mtime":1659305438000,"results":"16","hashOfConfig":"11"},{"size":861,"mtime":1657932963000,"results":"17","hashOfConfig":"11"},{"size":4126,"mtime":1661474882000,"results":"18","hashOfConfig":"11"},{"size":402,"mtime":1659064057000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"16bamzq",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"23"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"23"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/index.js",[],[],[],"/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/App.js",[],[],"/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/pages/Home.js",[],[],"/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/pages/About.js",[],[],"/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/Editor.js",["52","53","54","55","56"],[],"import React, {useState, useRef} from \"react\";\nimport \"../styles/Editor.css\"\nimport Dots from \"./Dots\";\nimport Selector from \"./Selector\";\nimport random from \"../modules/random\";\nimport BodyTest from \"./BodyTest\";\nexport default function Editor(){\n    const [imageSelected, setImageSelected] = useState(false);\n    const [dots, editDots] = useState([]);\n    const [mode, setMode] = useState(\"place\");\n    const [imageRender, setImageRender] = useState(false);\n    const [baseImage, setBaseImage] = useState(null);\n    const [showWireframe, setWireframe] = useState(false);\n    const uploadImageRef = useRef(null);\n    const imagePreviewRef = useRef(null);\n    const importJsonRef = useRef(null);\n    const dotW = 10;\n    \n\n    function dropHandler(ev) {\n      // Prevent default behavior (Prevent file from being opened)\n      ev.preventDefault();\n      \n      if (ev.dataTransfer.items && ev.dataTransfer.items[0] && ev.dataTransfer.items[0].getAsFile() ) {\n        setImageSelected(ev.dataTransfer.items[0].getAsFile());\n        ev.stopPropagation();\n      } else if(ev.dataTransfer.files && ev.dataTransfer.files[0]) {\n        setImageSelected(ev.dataTransfer.files[0]);\n        ev.stopPropagation();\n      }\n    }\n    function uploadImage(ev){\n      if(uploadImageRef.current && uploadImageRef.current.files && uploadImageRef.current.files[0] ){\n        setImageSelected(uploadImageRef.current.files[0]);\n      }\n    }\n    function handleImageClick(e){\n      var canvas = document.getElementById(\"editor_image\");\n      if(mode === \"place\" && canvas){\n        \n        const rect = canvas.getBoundingClientRect();\n        const elementRelativeX = e.clientX - rect.left;\n        const elementRelativeY = e.clientY - rect.top;\n        const canvasRelativeX = elementRelativeX * canvas.width / rect.width;\n        const canvasRelativeY = elementRelativeY * canvas.height / rect.height;\n        \n        editDots([...dots, {x: canvasRelativeX, y:canvasRelativeY, key:random(5), width:dotW, height:dotW}]);\n      }\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    function onDragEndHandler(ev) {\n      \n      ev.preventDefault();\n    }\n    function onDragEnterHandler(ev) {\n      \n      ev.preventDefault();\n    }\n    function handleDragOver(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    function loadImage(tempImage){\n      \n      var canvas = document.getElementById(\"editor_image\");\n      var context = canvas.getContext('2d');\n      if(tempImage){\n        \n        var scale = Math.min(canvas.width / tempImage.width, canvas.height / tempImage.height);\n        \n        var x = (canvas.width / 2) - (tempImage.width / 2) * scale;\n        var y = (canvas.height / 2) - (tempImage.height / 2) * scale;\n        context.drawImage(tempImage, x, y, tempImage.width * scale, tempImage.height * scale);\n        setBaseImage(tempImage)\n      }\n      \n    }\n    function reload(){\n      var canvas = document.getElementById(\"editor_image\");\n      if(canvas){\n        var context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        loadImage(baseImage);\n      }\n    }\n    function filterXY(data){\n      var newData = [];\n      \n      data.forEach( e => {\n        newData.push({x:e.x, y:e.y})\n      });\n      return newData;\n    }\n    function convertXYToNum(data){\n      var newData = [];\n      if(baseImage != null){\n        var width  = baseImage.naturalWidth;\n        var height = baseImage.naturalHeight;\n        data.forEach( e => {\n          newData.push({x:e.x/width, y:e.y/height})\n        });\n        return {polygons:newData, imageSize:{width:width, height:height}};\n      }\n    }\n\n    function clearImage(){\n      setImageSelected(false);\n      setBaseImage(null);\n      editDots([]);\n      setMode(\"place\");\n    }\n    \n    function importDots (ev){\n      if(importJsonRef.current && importJsonRef.current.files && importJsonRef.current.files[0] ){\n        var reader = new FileReader();\n        reader.onload = function() {\n          var fileContent = JSON.parse(reader.result);\n          var width  = fileContent.imageSize.width;\n          var height = fileContent.imageSize.height;\n          var data = fileContent.polygons;\n          var newData = [];\n          data.forEach( e => {\n            newData.push({x:e.x*width, y:e.y*height, key:random(5), width:dotW, height:dotW})\n          });\n          editDots(newData);\n          reload();\n          importJsonRef.current.value = ''; ;\n        };\n        reader.readAsText(importJsonRef.current.files[0]); \n      }\n    }\n       \n    React.useEffect(() => {\n      var canvas = document.getElementById(\"editor_image\");\n      \n      if(imageSelected && imageRender == false && canvas){\n        var context = canvas.getContext('2d');\n        var tempImage;\n        \n        if(baseImage == null){\n          tempImage = new Image();\n          tempImage.onload = function(){   \n            loadImage(tempImage);\n          };\n          tempImage.src = URL.createObjectURL(imageSelected);\n          setBaseImage(tempImage);\n        }else{\n          tempImage = baseImage;\n          loadImage(tempImage);\n        }\n        \n      }\n      \n    }, [imageSelected, imageRender, setImageRender]);\n   \n    \n    return (\n        <div>\n            { (() =>{\n                if(imageSelected){\n                  return(\n                    <div>\n                      <Selector mode={mode} changeMode={(m) => setMode(m)} />\n                      <div style={{display: mode==\"test\"? \"block\":\"none\"}} >\n                        <input type=\"checkbox\" id=\"wireframe\" name=\"wireframe\" value=\"wireframe\" onClick={() => setWireframe(!showWireframe)} checked={showWireframe} />\n                        <label for=\"wireframe\">Show Wireframe</label>\n                      </div>\n                      <div\n                      id=\"editor\"\n                      onDragOver={(e) => {e.stopPropagation();e.preventDefault();}}\n                      >\n                        <canvas id=\"canvas_test\" style={{display:\"none\"}} />\n                        <BodyTest mode={mode} image={imageSelected} dots={filterXY(dots)} baseImage={baseImage} wireframe={showWireframe} />\n                        <Dots data={dots} mode={mode} updateData={(d) => editDots(d)} reload={()=>reload()} />        \n                        <canvas width={400} height={400} id=\"editor_image\" className=\"editor_image\" draggable={false} onDragStart={(e) =>{e.preventDefault();return false;}} className=\"editor_image\" ref={imagePreviewRef} onClick={handleImageClick} />\n                      </div>\n                      {dots && dots.length <= 0 ?<h5>Click anywhere on image to place connecting dots</h5>: undefined}\n                      <div>\n                        <p><a href={'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(convertXYToNum(filterXY(dots))))} download=\"data.json\">\n                          <input type=\"button\" value=\"export json\" />\n                        </a></p>\n                        <p><input type=\"button\" value=\"start over\" onClick={clearImage} /> </p>\n                        <p>Import Dots: <input type=\"file\" ref={importJsonRef} style={{width: 180}} id=\"importJSON\" name=\"import\" accept=\"application/json\" onChange={importDots} ></input></p>\n                      </div>\n                    </div>\n                  )\n                }else{\n                  return(<div className=\"drop_zone\" onDrop={dropHandler} onDragEnd={onDragEndHandler} onDragEnter={onDragEnterHandler} onDragOver={e => handleDragOver(e)}>\n                            <p>Select or drag in an Image (pngs only)</p>\n                            <input type=\"file\" ref={uploadImageRef} style={{width: 180}} id=\"uploadImage\" name=\"import\" accept=\"image/png\" onChange={uploadImage} ></input> \n                        </div>)\n                }\n            }) ()}\n        </div>\n        \n    )\n}","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/BodyTest.js",["57","58","59"],[],"import React, {useState, useRef} from \"react\";\nimport Matter, { World } from \"matter-js\";\n\nexport default function BodyTest({mode, image, dots, wireframe, baseImage}){\n    \n    var wHPadding = 100;\n    var Engine = Matter.Engine,\n    Render = Matter.Render,\n    Runner = Matter.Runner,\n    Bodies = Matter.Bodies,\n    Composite = Matter.Composite;\n\n\n    // create an engine\n    var engine = Engine.create();\n    \n    \n\n    var canvas = document.getElementById('canvas_test');\n    var editorImg = document.getElementById('editor_image');\n    function getDotWH(){\n        var xs = [];\n        var ys = [];\n        dots.forEach( e => {\n            xs.push(e.x);\n            ys.push(e.y);\n        });\n        var minX = (Math.min(...xs));\n        var maxX = (Math.max(...xs));\n        var minY = (Math.min(...ys));\n        var maxY = (Math.max(...ys));\n        if(minX < 0){\n            minX =0;\n        }\n        if(minY < 0){\n            minY =0;\n        }\n        \n        if(maxX > editorImg.width){\n            maxX =editorImg.width;\n        }\n        if(maxY > editorImg.height){\n            maxY =editorImg.height;\n        }\n        return [maxX+5, minX, maxY+5, minY]\n    }\n    \n    if(mode == \"test\" && canvas && editorImg && image){  \n\n        var render = Render.create({\n            element: window.document.getElementById(\"editor\"),\n            engine: engine,\n            canvas: canvas,\n            options: {\n                width: editorImg.width+wHPadding,\n                height: editorImg.height+wHPadding,\n                wireframes: wireframe,\n              }\n        });\n        \n       \n        \n        // create two boxes and a ground\n        if(dots && dots.length > 2){\n            var wH = getDotWH();\n            var scale = Math.min((editorImg.width) / baseImage.width, (editorImg.height) / baseImage.height);\n            var x = wH[1]+50\n            var y = wH[3]+50\n            var boxA = Bodies.fromVertices( x, y, dots, { \n                    isStatic: true,\n                });\n            \n            boxA.position.x = boxA.bounds.min.x;\n            boxA.position.y = boxA.bounds.min.y;\n            boxA.positionPrev.x = boxA.bounds.min.x;\n            boxA.positionPrev.y = boxA.bounds.min.y;\n            \n            Matter.Body.set(boxA, \"position\", {x: x, y: y})\n            var x2 = (((wH[0]-wH[1]))*.5)+wH[1]+50\n            var y2 = ((wH[2]-wH[3])*.5)+wH[3]+50\n            boxA.position.x = x2;\n            boxA.position.y = y2;\n            boxA.positionPrev.x = x2;\n            boxA.positionPrev.y = y2;\n            \n            \n            var boxB = Bodies.rectangle(250,250, 400, 400, { \n                isStatic: true,\n                isSensor: true,\n                render:\n                {\n                    sprite:\n                    {\n                        texture: URL.createObjectURL(image),\n                        xScale:scale,\n                        yScale:scale,\n                    }\n                }\n            });\n            \n                \n            Composite.add(engine.world, [boxA, boxB]);\n        }else{\n            alert(\"You need place at least three dots to test\");\n        }\n        \n        \n        \n        var mouse = Matter.Mouse.create(render.canvas);\n        let mouseConstraint = Matter.MouseConstraint.create(engine, {\n            mouse:mouse,\n            constraint: {\n              render: {\n                visible: false\n              }\n            }\n        });\n        \n        Matter.Events.on(mouseConstraint, 'mousedown', function(event) {\n            const x = event.mouse.position.x\n            const y = event.mouse.position.y\n            var ball = Bodies.circle( x, y, 5);\n            World.add(engine.world, ball);\n        })\n        Composite.add(engine.world, [mouseConstraint]);\n        Render.run(render);\n        var runner = Runner.create();\n    \n        // run the engine\n        Runner.run(runner, engine);\n\n        canvas.style.marginLeft = \"auto\";\n        canvas.style.marginRight = \"auto\";\n        canvas.style.display = \"block\";\n        editorImg.style.display = \"none\";\n    }else if(canvas && editorImg){\n        canvas.style.display = \"none\";\n        editorImg.style.display = \"block\";\n    }\n    \n    return(\n        <>\n        </>\n    )\n}","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/Selector.js",["60","61"],[],"import React, {useState, useRef} from \"react\";\n\nexport default function Selector({mode,changeMode}){\n\n  return (\n      <div style={{marginBottom:20}}>\n          <input type=\"radio\" id=\"place\" name=\"mode\" value=\"30\" onClick={() => changeMode(\"place\")} checked={mode=== \"place\"} />\n          <label for=\"place\">Place</label>\n          <input type=\"radio\" id=\"move\" name=\"mode\" value=\"60\" onClick={() => changeMode(\"move\")} checked={mode=== \"move\"} />\n          <label for=\"move\">Move</label>  \n          <input type=\"radio\" id=\"remove\" name=\"mode\" value=\"100\" onClick={() => changeMode(\"remove\")} checked={mode=== \"remove\"}/>\n          <label for=\"remove\">Remove</label>\n          <input type=\"radio\" id=\"test\" name=\"mode\" value=\"100\" onClick={() => changeMode(\"test\")} checked={mode=== \"test\"}/>\n          <label for=\"test\">Test</label>\n      </div>\n      \n  )\n}","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/components/Dots.js",["62","63","64","65"],[],"import React, {useState, useRef} from \"react\";\nimport random from \"../modules/random\";\nexport default function Dots({data, updateData, mode, reload}){\n    const dotDrag = useRef();\n    const [renderedDot, setRenderedDot] = useState([]);\n    const [isDragging, setDragging] = useState(null);\n    \n    \n    function drawLines(xA,yA,xB,yB, context)\n    {\n        context.beginPath();\n        context.moveTo(xA, yA);\n        context.lineTo(xB, yB);\n        context.stroke();\n        \n    }\n    function reloadCanvas(){\n        reload();\n        setRenderedDot([]);\n        loadDots(true);\n        \n    }\n    function loadDots(includeAll){\n        \n        data.forEach((dot, index, array) => {\n            \n            if((!renderedDot.includes(dot) || includeAll == true) && canvas){\n                \n                var context = canvas.getContext('2d');\n                context.beginPath();\n                context.ellipse(dot.x, dot.y, dot.width, dot.height, 0, 0, 2 * Math.PI)\n                context.stroke();\n                if(array[index-1]){\n                    drawLines(dot.x, dot.y, array[index-1].x, array[index-1].y, context);\n                }\n                if(array.length >= 3 && array.length-1 == index){\n                    drawLines(dot.x, dot.y, array[0].x, array[0].y, context);\n                }\n    \n                setRenderedDot([...renderedDot, dot]);\n            } \n            \n        });\n    }\n    \n    var canvas = document.getElementById(\"editor_image\");\n    function dotsClick(ev){\n        const rect = canvas.getBoundingClientRect();\n        var x = ev.clientX - rect.left;\n        var y = ev.clientY - rect.top;\n        \n        var dotSelected = null;\n        data.forEach((dot, index) => {\n            var dotW = dot.width;\n            var dotH = dot.height;\n            var dotL = dot.x-dotW;\n            var dotT = dot.y-dotH;\n            \n            if (y > dotT && y < (dotT + (dotH *2)) \n                && x > dotL && x < (dotL + (dotW*2)) ) {\n                dotSelected = index;\n            }\n        })\n        if(mode === \"remove\" && dotSelected != null){\n            var tempData = data;\n            tempData.splice(dotSelected, 1);\n            updateData([...tempData]);\n            reloadCanvas();\n        }\n        \n    }\n   \n    if(canvas){\n        canvas.onclick = (ev)=> {dotsClick(ev)};\n        //drag\n        canvas.onmousedown =  (ev)=> {\n            if(isDragging == null && mode === \"move\"){\n                const rect = canvas.getBoundingClientRect();\n                var x = ev.clientX - rect.left;\n                var y = ev.clientY - rect.top;\n                data.forEach((dot, index) => {\n                    var dotW = dot.width;\n                    var dotH = dot.height;\n                    var dotL = dot.x-dotW;\n                    var dotT = dot.y-dotH;\n                    if (y > dotT && y < (dotT + (dotH *2)) \n                        && x > dotL && x < (dotL + (dotW*2)) ) {\n                        setDragging(index);\n                    }\n                })\n            }\n            \n        };\n        canvas.onmouseup =  (ev)=> {\n            if(isDragging != null ){\n                setDragging(null);\n            }\n        };\n        canvas.onmousemove =  (ev)=> {\n            if(isDragging != null && mode == \"move\"){\n                var tempData = data;\n                const rect = canvas.getBoundingClientRect();\n                const elementRelativeX = ev.clientX - rect.left;\n                const elementRelativeY = ev.clientY - rect.top;\n                const canvasRelativeX = elementRelativeX * canvas.width / rect.width;\n                const canvasRelativeY = elementRelativeY * canvas.height / rect.height;\n                tempData[isDragging]= {x: canvasRelativeX, y:canvasRelativeY, key:random(5), width:10, height:10};\n                updateData([...tempData]);\n                reloadCanvas();\n            }\n        };\n        canvas.onmouseout =  (ev)=> {\n            if(isDragging != null ){\n                setDragging(null);\n            }\n        };\n        \n    }\n    loadDots(false);\n    \n    return(\n        <></>\n    )\n}","/Users/scottharrison/ownCloud/Desktop/cached projects/web-physic-body-editor/physics-body-tool/src/modules/random.js",[],[],{"ruleId":"66","severity":1,"message":"67","line":138,"column":39,"nodeType":"68","messageId":"69","endLine":138,"endColumn":41},{"ruleId":"70","severity":1,"message":"71","line":139,"column":13,"nodeType":"72","messageId":"73","endLine":139,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":156,"column":8,"nodeType":"76","endLine":156,"endColumn":52,"suggestions":"77"},{"ruleId":"66","severity":1,"message":"67","line":166,"column":49,"nodeType":"68","messageId":"69","endLine":166,"endColumn":51},{"ruleId":"78","severity":1,"message":"79","line":177,"column":174,"nodeType":"80","messageId":"81","endLine":177,"endColumn":198},{"ruleId":"70","severity":1,"message":"82","line":1,"column":16,"nodeType":"72","messageId":"73","endLine":1,"endColumn":24},{"ruleId":"70","severity":1,"message":"83","line":1,"column":26,"nodeType":"72","messageId":"73","endLine":1,"endColumn":32},{"ruleId":"66","severity":1,"message":"67","line":48,"column":13,"nodeType":"68","messageId":"69","endLine":48,"endColumn":15},{"ruleId":"70","severity":1,"message":"82","line":1,"column":16,"nodeType":"72","messageId":"73","endLine":1,"endColumn":24},{"ruleId":"70","severity":1,"message":"83","line":1,"column":26,"nodeType":"72","messageId":"73","endLine":1,"endColumn":32},{"ruleId":"70","severity":1,"message":"84","line":4,"column":11,"nodeType":"72","messageId":"73","endLine":4,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":27,"column":58,"nodeType":"68","messageId":"69","endLine":27,"endColumn":60},{"ruleId":"66","severity":1,"message":"67","line":36,"column":56,"nodeType":"68","messageId":"69","endLine":36,"endColumn":58},{"ruleId":"66","severity":1,"message":"67","line":100,"column":43,"nodeType":"68","messageId":"69","endLine":100,"endColumn":45},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'context' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'baseImage'. Either include it or remove the dependency array.","ArrayExpression",["85"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useState' is defined but never used.","'useRef' is defined but never used.","'dotDrag' is assigned a value but never used.",{"desc":"86","fix":"87"},"Update the dependencies array to be: [imageSelected, imageRender, setImageRender, baseImage]",{"range":"88","text":"89"},[5179,5223],"[imageSelected, imageRender, setImageRender, baseImage]"]